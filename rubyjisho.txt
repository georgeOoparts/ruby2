puts "kkkkkk"
puts 'kkkkkk'

# comentes

puts 2 + 3

puts 5　　数値

puts "5 + 2" 文字

puts 3 * 5
puts 6 / 2
puts 9 % 2 余り


puts "ninnja"+"wanko" 文字の結合

puts "3" + "5"

puts 3 + 5

name="george"

puts name

name+"sato"
puts "hello#{name}hello" >hellosatohello

puts 'hello#{name}hello' >hello#{name}hello
------------------------------------------------------
score=94
if score>80
	puts"okkkk"
end
------------------------------------------------------
score =80

puts score<75  >>>false
puts score>=80 >>>>true


elsif rubyは
ーーーーーーーーーーーーー２２２－－－－－－－－－－－
name=["hirate","akina","otoha"]

puts name>>>> hirate
              akina
              otoha

puts name[0] >hirate

---------------------------------------------              
name=["hirate","akina","otoha"]

name.each do|nameEach|
	puts nameEach
end

>>>> 		hirate
              akina
              otoha

---------------------------------------------
ハッシュ
user ={"name"=>"hirate","age"=>17}
-----------------------
puts user

>>>
{"name"=>"hirate","age"=>17}
-----------------------
puts user["name"]

>>>
hirate
-----------------------
ハッシュの要素を加える
user["name"]="suzumoto"

puts user["name"]
>>>
suzumoto
-----------------------
user["gender"]="female"

puts user
>>>
{"name"=>"hirate","age"=>17,"gender"=>"female"}
---------------------------------------------
シンボル
user ={:name=>"hirate",:age=>17}
でもOK
puts "ruby"   puts :ruby 同じ 
---------------------------------------------
user ={:name=>"hirate",:age=>17}
と
user ={name=:"hirate",age:17}
同じ
省略形では
puts user[:age]としなければだめ
---------------------------------------------
user ={:name=>"hirate"}

user[:name]   true
user[:age]   false
---------------------------------------------
配列とハッシュ
users=[
	{name:"hirate",age:14}
	{name:"suzumoto",age:18}
]
-----------------------
puts users[1][:name]
>>>
suzumoto
-----------------------
users.each do |user|
	puts user[:name]
end
>>>
hirate
suzumoto
---------------------------------------------
メソッド
def introduce
	puts"naiyou"
end

呼び出し
introduce
---------------------------------------------
審議値を返す　メソッド　？は習慣　
def negative?(number)
	return number<0
end
---------------------------------------------
並びで変数を送るのじゃなく、キーワードで変数をメソッドに送る

# キーワード引数を使うように書き換えてください
def buy(item:, price:, count:)
	puts "#{item}を#{count}台のお買い上げです"
	puts "合計金額は#{price * count}円です"
end

# キーワード引数を使うように書き換えてください
buy(item:"テレビ", price:15000, count:2)


---------------------------------------------
クラス
class Menu
	attr_accessor :name
	attr_accessor :price

	
	def initialize
    
    		puts"クラスが作成された時に実行"
  	end


	def info
    
    		return "#{self.name} #{self.price}円"
  	end
end
-----------------------
kuso=Menu.new
kuso.name="sushi"
-----------------------
puts kuso.name
>>>
sushi
-----------------------
---------------------------------------------
他の所にあるクラスを呼び込む(同じフォルダにあるmenu.rubyというファイル)
Menuというクラス
require"./menu"
menu1=Menu.new
---------------------------------------------
値を受け取る　文字
# 入力を受け取って変数nameに代入してください
name=gets.chomp

--------------------------------------------
# 入力を数値として受け取って変数countに代入してください
count=gets.chomp.to_i
---------------------------------------------
クラス継承 親Menu
class Food>Menu
end
---------------------------------------------
オーバーライド
親子クラスで同じ名前のメソッドがあるとき
子クラスでは
親クラスでなく子クラスのメソッドが呼び出される。
---------------------------------------------
オーバライドで子クラスのメソッドの引数を親から引き継ぐ
例では　name　price
def initialize(name:, price:, calorie:)
    # superを使って書き換えてください
    super(name:name, price:price)
    
    self.calorie = calorie
end


---------------------------------------------
rubyが用意したDateクラスを使う
require "date"

birthday=Date.new(1979,05,15)
today=Date.today
-----------------------
puts birthday
-----------------------
puts birthday.sunday?
---------------------------------------------
 # クラスメソッド「is_discount_day?」を定義してください
  def Menu.is_discount_day?
  end
---------------------------------------------

-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------








