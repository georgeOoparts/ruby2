puts "kkkkkk"
puts 'kkkkkk'

# comentes

puts 2 + 3

puts 5　　数値

puts "5 + 2" 文字

puts 3 * 5
puts 6 / 2
puts 9 % 2 余り


puts "ninnja"+"wanko" 文字の結合

puts "3" + "5"

puts 3 + 5

name="george"

puts name

name+"sato"
puts "hello#{name}hello" >hellosatohello

puts 'hello#{name}hello' >hello#{name}hello
------------------------------------------------------
score=94
if score>80
	puts"okkkk"
end
------------------------------------------------------
score =80

puts score<75  >>>false
puts score>=80 >>>>true


elsif rubyは
ーーーーーーーーーーーーー２２２－－－－－－－－－－－
name=["hirate","akina","otoha"]

puts name>>>> hirate
              akina
              otoha

puts name[0] >hirate

---------------------------------------------              
name=["hirate","akina","otoha"]

name.each do|nameEach|
	puts nameEach
end

>>>> 		hirate
              akina
              otoha

---------------------------------------------
ハッシュ
user ={"name"=>"hirate","age"=>17}
-----------------------
puts user

>>>
{"name"=>"hirate","age"=>17}
-----------------------
puts user["name"]

>>>
hirate
-----------------------
ハッシュの要素を加える
user["name"]="suzumoto"

puts user["name"]
>>>
suzumoto
-----------------------
user["gender"]="female"

puts user
>>>
{"name"=>"hirate","age"=>17,"gender"=>"female"}
---------------------------------------------
シンボル
user ={:name=>"hirate",:age=>17}
でもOK
puts "ruby"   puts :ruby 同じ 
---------------------------------------------
user ={:name=>"hirate",:age=>17}
と
user ={name=:"hirate",age:17}
同じ
省略形では
puts user[:age]としなければだめ
---------------------------------------------
user ={:name=>"hirate"}

user[:name]   true
user[:age]   false
---------------------------------------------
配列とハッシュ
users=[
	{name:"hirate",age:14}
	{name:"suzumoto",age:18}
]
-----------------------
puts users[1][:name]
>>>
suzumoto
-----------------------
users.each do |user|
	puts user[:name]
end
>>>
hirate
suzumoto
---------------------------------------------
メソッド
def introduce
	puts"naiyou"
end

呼び出し
introduce
---------------------------------------------
審議値を返す　メソッド　？は習慣　
def negative?(number)
	return number<0
end
---------------------------------------------
並びで変数を送るのじゃなく、キーワードで変数をメソッドに送る

# キーワード引数を使うように書き換えてください
def buy(item:, price:, count:)
	puts "#{item}を#{count}台のお買い上げです"
	puts "合計金額は#{price * count}円です"
end

# キーワード引数を使うように書き換えてください
buy(item:"テレビ", price:15000, count:2)


---------------------------------------------
クラス
class Menu
	attr_accessor :name
	attr_accessor :price

	
	def initialize
    
    		puts"クラスが作成された時に実行"
  	end


	def info
    
    		return "#{self.name} #{self.price}円"
  	end
end
-----------------------
kuso=Menu.new
kuso.name="sushi"
-----------------------
puts kuso.name
>>>
sushi
-----------------------
---------------------------------------------
他の所にあるクラスを呼び込む(同じフォルダにあるmenu.rubyというファイル)
Menuというクラス
require"./menu"
menu1=Menu.new
---------------------------------------------
値を受け取る　文字
# 入力を受け取って変数nameに代入してください
name=gets.chomp

--------------------------------------------
# 入力を数値として受け取って変数countに代入してください
count=gets.chomp.to_i
---------------------------------------------
クラス継承 親Menu
class Food>Menu
end
---------------------------------------------
オーバーライド
親子クラスで同じ名前のメソッドがあるとき
子クラスでは
親クラスでなく子クラスのメソッドが呼び出される。
---------------------------------------------
オーバライドで子クラスのメソッドの引数を親から引き継ぐ
例では　name　price
def initialize(name:, price:, calorie:)
    # superを使って書き換えてください
    super(name:name, price:price)
    
    self.calorie = calorie
end


---------------------------------------------
rubyが用意したDateクラスを使う
require "date"

birthday=Date.new(1979,05,15)
today=Date.today
-----------------------
puts birthday
-----------------------
puts birthday.sunday?
---------------------------------------------
---------------------------------------------
 # クラスメソッド「is_discount_day?」を定義してください
  def Menu.is_discount_day?
  end
-------

--------------------------------------
ruby rails
新しいアプリケーション（tweet_app）を作る>必要なファイルが勝手に作られる
ターミナル
rails new tweet_app
-----------------------
サーバを起動
ブラウザでアドレスlocalhost:3000に最初期のホームページが立ち上がらせる

ターミナル
rails server

ブラウザでアドレスlocalhost:3000を入力
＞＞＞
ブラウザに最初期のホームページが立ち上がる
-----------------------
ブラウザ　アドレス（localhost:3000/home/top）
にホームページのトップページを立ち上げる
rails generate controller home top

/自動でapp/viewsにhomeフォルダを作り、top.html.erbというファイルを作られる

//app/controllersにhome_controller.rbというファイルを作る　
class HomeController < ApplicationController
  def top//ここでtop.html.erbというファイルを指定している（アクションという）
  end
end

app/controllers/home_controller.rbでapp/views/top.html.erb　を指定し実行する
--------------------------------------
--------------------------------------
ページが表示されるまで
ルーテイング（コントローラとアクションを指定）＞コントローラ（アクションを指定）＞ビュー

//まずルーティングで確認＞コントローラへ

tweet_app/config/routes.rb
Rails.application.routes.draw do
  get "home/top" => "home#top"
end
-----------------------
//コントローラで.html.erbファイルを指定
app/controllersにhome_controller.rbを変更
def top//ここでabout.html.erbというファイルを指定している（アクションという）
end

-----------------------


中のhtmlを変える
app/views/home/top.html.erb
の内容を変える
-----------------------
アドレスを変えるlocalhost:3000/home/topをlocalhost:3000/topにする
tweet_app/config/routes.rbの中を変更

get "home/top" => "home#top"
↓
get "top" => "home#top"
-----------------------
アクション（アドレス）の数を増やす（localhost:3000/home/about）を追加
tweet_app/config/routes.rbの中を変更

get "about" => "home#about"
を追加

app/controllersにhome_controller.rbを変更
def about//ここでabout.html.erbというファイルを指定している（アクションという）
end
を追加

app/views/home/about.html.erbというファイルを作る
htmlの内容を書く
-----------------------

共通部分を追加する場所は
app/views/layouts/application.html.erb 
にあります。

body の中に記述

-----------------------
cssを追加
app/assets/stylesheets
-----------------------
画像を表示
app/public/に画像を置く
<img src="/画像名" >で画像表示
-----------------------
最初期のアドレスlocalhost:3000でトップページを表示するよう指定
tweet_app/config/routes.rbの中を変更

get "top" => "home#top"
↓
get "/" => "home#top"
-----------------------
リンクを張る
app/views/home/about.html.erbというファイル
<a href="/">tweetapp</a>
<a href="/about">tweetappとは</a>
-----------------------
<%= link_to("リンクタイトル", "URL") %>
-----------------------

tweet_app/config/routes.rbの中を変更

get "/" => "home#top"
get "about" => "home#about"
-----------------------
<%
  posts=[
    "今日からProgateでRailsの勉強するよー！",
    "投稿一覧ページ作成中！"
  ]
%>
-----------------------
<!-- 以下の<% %>を使ってeach文を追加してください -->
    <%posts.each do |post| %>
      <div class="posts-index-item">
        <!-- 以下の<%= %>を使って投稿内容を表示してください -->
        <%= post%>
      </div>
    <!-- 以下の<% %>を使ってeach文のendを追加してください -->
    <%end%>

-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------


-------------------------------------
サイトの投稿のする部分を作る（まずは一覧であるindexを作る）
ターミナル
rails generate controller　posts　index
-----------------------
erbファイルのなかでルビーで変数を定義
<% post1="今日からProgateでRailsの勉強するよー！" %>
erbファイルでhtmlでルビーで変数を表示
<%= post1 %>
-----------------------
アクション（コントローラ）で変数を定義
class PostsController < ApplicationController
  def index
    # viewで定義していた配列postsを@postsという変数名で定義してください
    @posts=[
      "今日からProgateでRailsの勉強するよー！",
      "投稿一覧ページ作成中！"
    ]
  end
end
----------さらに↓erbで記述-------------
//変数に@をつける
<!-- 変数postsを@postsに書き換えてください -->
    <% @posts.each do |post| %>
      <div class="posts-index-item">
        <%= post %>
      </div>
    <% end %>
-----------------------
ポストにtext形式のデータベースを作る（migrate）
ターミナル
rails g model Post content:text
-----------------------
作ったmigrateファイルで表を作成
ターミナル
rails db:migrate
-----------------------
rails consoleを立ち上げる
ターミナル
rails console
-----------------------
データベースに情報を入れる
rails console上で
■ コンソールで以下のコマンドを実行してください
post1 = Post.new(content: "今日からProgateでRailsの勉強するよー！")
post1.save
-----------------------
データベースの情報を取り出す
■ ターミナルで以下のコマンドを実行してください
rails console
//
■ コンソールで以下のコマンドを実行してください
post = Post.first
post.content
-----------------------
■ ターミナルで以下のコマンドを実行してください。
rails console

■ コンソールで以下のコマンドを実行してください。
posts = Post.all

posts[0]
posts[1]

posts[0].content
posts[1].content
-----------------------
■ ターミナルで以下のコマンドを実行してください
rails console

■ コンソールで以下のコマンドを実行してください
post3 = Post.new(content: "やっぱりプログラミングは楽しい！")
post3.save
--
class PostsController < ApplicationController
  def index
    # @postsに代入されている配列をPost.allに書き換えてください
    @posts = Post.all
  end
end
--
<% @posts.each do |post| %>
      <div class="posts-index-item">
        <!-- post.contentを使って書き換えてください -->
        <%= post.content %>
      </div>
<% end %>
-----------------------
top.html.erb、about.html.erb、
index.html.erbにあるヘッダーを共通のレイアウトとしてまとめていきましょう。
「views/layouts/application.html.erb」
application.html.erb
<body>
    <!-- ここにヘッダーを書いてください -->
    <header>
      <div class="header-logo">
        <a href="/">TweetApp</a>
      </div>
      <ul class="header-menus">
        <li><a href="/about">TweetAppとは</a></li>
      </ul>
    </header>
    <!-- 各ビューファイルは以下のyieldに代入され、application.html.erbの一部となる -->
    <%= yield %>
  </body>

-----------------------
「views/layouts/application.html.erb」のリンクをaタグからlink_toメソッドに書き換えましょう。
第一引数　表示　第2引数リンク
        <!-- 以下のリンクをlink_toメソッドを用いて変更してください -->
        <%= link_to("TweetApp", "/") %>

-----------------------
-----------------------
-----------------------
-----------------------
--------------------------------------
■ コンソールで以下のコードを実行してください。
PostからID3を探してpostに代入
post = Post.find_by(id: 3)
postの値を表示
post.content
post.created_at
--------------------------------------
posts/1,posts/2～posts/99　などのページを作る　
Rails.application.routes.draw do
  get "posts/index" => "posts#index"
  # ここに投稿詳細ページへのルーティングを追加してください
  get "posts/:id" => "posts#show"
  
  get "/" => "home#top"
  get "about" => "home#about"
end
--------------------------------------
class PostsController < ApplicationController
  def index
    @posts = Post.all
  end
  
  def show
    # 変数paramsから「:id」の値を取得し、変数@idに代入してください
    @id = params[:id]
  end
end
--------------------------------------
表示
<%= @post.content %>

<%= @post.created_at %>
--------------------------------------
def show
    # find_byを用いてpostsテーブルから「params[:id]」に対応するデータを取り出し、変数@postに代入してください
    @post=Post.find_by(id:params[:id])
  end
--------------------------------------
<%= link_to(posts.content, "/posts/#{post.id}") %>
--------------------------------------
 post"posts/create"=>"posts#create"
--------------------------------------
<%=form_tag("/posts/create")do%>
      <div class="form">
        <div class="form-body">
          <textarea></textarea>
          <input type="submit" value="投稿">
        </div>
      </div>
    <!-- end を追加してください -->
    <%end%>
--------------------------------------
投稿ボタンを押すと/posts/indexへリンクする
def create
    # redirect_toメソッドを用いて、自動的に投稿一覧ページに転送されるようにしてください
    redirect_to("/posts/index")
  end
--------------------------------------
<textarea name="content"></textarea>
--------------------------------------
def create
    # フォームから送信されたデータを受け取り、保存する処理を追加してください
    @post = Post.new(content: params[:content])
    @post.save
    redirect_to("/posts/index")
  end
--------------------------------------
def index            
    # Post.allにorderメソッドを用いて、新しい投稿が上から順に表示されるようにしてください            
    @posts = Post.all.order(created_at: :desc)            
                    
end
--------------------------------------

--------------------------------------
--------------------------------------
--------------------------------------
--------------------------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------
-----------------------








